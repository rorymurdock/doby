"""Test Doby"""
import pytest
from doby import Doby
from . import test_config

config_filename = test_config.write_config(test_config.create_test_config())

DOBY = Doby(config_filename=config_filename, debug=True)


def test_check_config_key_exists():
    """Test check_config_key_exists"""

    assert isinstance(test_config.create_test_config(), dict)
    testing_config = test_config.create_test_config()

    assert DOBY.check_config_key("debug", testing_config)


def test_check_config_key_is_missing(caplog):
    """Test check_config_key_is_missing"""

    testing_config = test_config.create_test_config()

    with pytest.raises(SystemExit) as pytest_wrapped_e:
        DOBY.check_config_key("non_existant_key")

    assert pytest_wrapped_e.type == SystemExit
    assert caplog.records[0].levelname == "CRITICAL"
    assert caplog.records[0].message == "non_existant_key key required in config"

    assert DOBY.check_config_key("debug", testing_config)


def test_check_config_key_is_missing_custom_message(caplog):
    """Test check_config_key_is_missing_custom_message"""
    # testing_config = test_config.create_test_config()

    with pytest.raises(SystemExit) as pytest_wrapped_e:
        DOBY.check_config_key("non_existant_key", "This key is missing")

    assert pytest_wrapped_e.type == SystemExit
    assert caplog.records[0].levelname == "CRITICAL"
    assert caplog.records[0].message == "This key is missing"


def test_get_imports():
    """Test get_imports"""

    imports = {
        "requirements": {
            "apple": {},
            "orange": {"builtin": True, "operator": "==", "version": "1.0.0"},
            "pear": {"builtin": False, "operator": "==", "version": "1.0.0"},
            "lime": {"builtin": False, "operator": "=="},
        }
    }

    DOBY.reset_config(imports)
    assert DOBY.get_imports() == (
        ["reqrest", "apple", "pear==1.0.0", "lime"],
        [
            "import logging",
            "import reqrest",
            "import apple",
            "import orange",
            "import pear",
            "import lime",
            "",
        ],
    )


def test_get_docstring():
    """Test get_docstring"""

    assert (
        DOBY.get_docstring()
        == '"""File automatically generated by Doby - https://github.com/rorymurdock/doby"""'
    )


def test_get_readme():
    """Test get_readme"""

    DOBY.reset_config(test_config.create_test_config())
    assert DOBY.get_readme() == [
        "# fruitTest",
        "",
        "PyTest configuration library",
        "",
        "## Default functions",
        "",
    ]


def test_build_functions_basic():
    """Test build_functions_basic"""

    config = test_config.create_test_config()
    config["functions"] = {}
    config["functions"]["endpoint"] = {}
    config["functions"]["endpoint"]["peel_fruit"] = {}
    fruit = config["functions"]["endpoint"]["peel_fruit"]
    fruit["name"] = "code_test"
    fruit["description"] = "Let's peel"
    fruit["header"] = "api"
    fruit["method"] = "get"
    fruit["path"] = "/api/system/info"
    fruit["return"] = "response.text"

    DOBY.reset_config(config)

    assert DOBY.get_functions() == [
        "    def code_test(self):",
        '        """Let\'s peel"""',
        "",
        '        response = self.api.get("/api/system/info")',
        "",
        "        return response.text",
    ]


def test_get_setup():
    """Test get_setup"""

    config = {}
    config["description"] = "fruitTest configuration library"
    config["name"] = "fruitTest"
    config["setup"] = {}
    config["requirements"] = {
        "apple": {},
        "orange": {"builtin": True, "operator": "==", "version": "1.0.0"},
        "pear": {"builtin": False, "operator": "==", "version": "1.0.0"},
        "lime": {"builtin": False, "operator": "=="},
    }
    setup = config["setup"]
    setup["version"] = "1.0.0"
    setup["author"] = "Me"
    setup["author_email"] = "me@example.com"
    setup["url"] = "https://example.com"

    DOBY.reset_config(config)

    assert DOBY.get_setup() == [
        "import setuptools",
        "",
        'with open("README.md", "r") as fh:',
        "    LONG_DESCRIPTION = fh.read()",
        "",
        'setuptools.setup(name="fruitTest", version="1.0.0", author="Me", '
        'author_email="me@example.com", url="https://example.com", '
        'description="fruitTest configuration library", '
        "long_description=LONG_DESCRIPTION, "
        'long_description_content_type="text/markdown", classifiers=[], '
        "install_requires=['reqrest', 'apple', 'pear', 'lime'], "
        "include_package_data=True)",
    ]


def test_get_name():
    """Test get_name"""

    DOBY.reset_config(test_config.create_test_config())
    assert DOBY.get_name() == "fruitTest"
