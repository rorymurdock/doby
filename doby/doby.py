"""Doby"""
import sys
import logging

from .config import load_config
from .utils import get_debug, key_exists
from .build import imports, classes, readme, functions, setup_py

LIB_NAME = "Doby"
LIB_URL = "https://github.com/rorymurdock/doby"


class Doby:
    """Framework for making REST API libraries"""

    def __init__(
        self,
        config_filename: str = "configs/api.json",
        debug: bool = False,
        check_config: bool = True,
    ):
        """Init a few things"""

        logging.basicConfig(format="%(levelname)s	%(funcName)s	%(message)s")

        # Setting log level off the arg first
        if debug:
            logging.getLogger().setLevel(logging.INFO)

        # Load config
        self.config = load_config(config_filename=config_filename)

        # If config has debugging enabled set it here
        if get_debug(debug, self.config, {}):
            logging.getLogger().setLevel(logging.INFO)

        # Set debug for config
        self.config["debug"] = debug

        if check_config:
            self.check_config()

        # Init the out vars
        self.out = {}

    def check_config(self):
        """Make sure all the required keys are in config"""

        logging.debug("Checking config")
        for key in ["name", "description", "hostname", "headers", "functions"]:
            self.check_config_key(key)

    def check_config_key(self, key, error_msg=None):
        """Checks if a key exists at the parent level of the config"""

        if not key_exists(key, self.config):
            if error_msg:
                logging.critical(error_msg)
                sys.exit()
            else:
                logging.critical("%s key required in config", key)
                sys.exit()

        logging.info("%s key exists in config", key)
        return True

    def build_file(self):
        """Built the files"""
        logging.debug("Building the output files")
        output_lib_name = self.config["name"]

        out_files = {}
        logging.debug("Building Docstring")
        out_files[f"{output_lib_name}/{output_lib_name}.py"] = [self.get_docstring()]
        out_files[f"{output_lib_name}/{output_lib_name}.py"] = [self.get_docstring()]

        logging.debug("Building imports & requirements")
        requirements_list, imports_list = self.get_imports()

        out_files["requirements.txt"] = requirements_list
        out_files[f"{output_lib_name}/{output_lib_name}.py"] += imports_list

        logging.debug("Building class")
        out_files[f"{output_lib_name}/{output_lib_name}.py"] += self.get_classes()
        out_files[f"{output_lib_name}/{output_lib_name}.py"] += self.get_functions()

        logging.debug("Building .gitignore")
        if key_exists(".gitignore", self.config):
            out_files[".gitignore"] = self.config[".gitignore"]

        logging.debug("Building README.md")
        out_files["README.md"] = self.get_readme()

        if key_exists("setup", self.config):
            logging.debug("Building setup.py")
            out_files["setup.py"] = self.get_setup()

        return out_files

    def reset_config(self, config: dict):
        """Used only for testing to update the config"""

        logging.warning("Resetting config")
        self.config = config

    def get_docstring(self):
        """Create the docstring"""

        logging.info("Creating docstring")
        return f'"""File automatically generated by {LIB_NAME} - {LIB_URL}"""'

    def get_imports(self):
        """Generate imports"""

        return imports.build_import(self.config)

    def get_classes(self):
        """Generate classes"""

        return classes.build_class(self.config)

    def get_readme(self):
        """Generate readme"""

        return readme.build_readme(self.config)

    def get_functions(self):
        """Generate functions"""

        return functions.build_functions(self.config)

    def get_setup(self):
        """Generate setup.py"""

        return setup_py.build_setup(self.config)

    def get_name(self):
        """Get the library name"""
        return self.config["name"]
